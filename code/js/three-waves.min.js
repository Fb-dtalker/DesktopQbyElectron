/*
var SEPARATION = 100,
    AMOUNTX = 100,
    AMOUNTY = 70;

var container;
var camera, scene, renderer;

var particles, particle, count = 0;

var mouseX = 85,
    mouseY = -642;

var windowHalfX = window.innerWidth / 2;
var windowHalfY = window.innerHeight / 2;

var show = true;

function init() {

    container = document.createElement('div');
    document.body.appendChild(container);

    camera = new THREE.PerspectiveCamera(120, window.innerWidth / window.innerHeight, 1, 10000);
    camera.position.z = 1000;

    scene = new THREE.Scene();

    particles = new Array();

    var PI2 = Math.PI * 2;
    var material = new THREE.ParticleCanvasMaterial({

        color: 0xe1e1e1,
        program: function(context) {

            context.beginPath();
            context.arc(0, 0, .6, 0, PI2, true);
            context.fill();

        }

    });

    var i = 0;

    for (var ix = 0; ix < AMOUNTX; ix++) {

        for (var iy = 0; iy < AMOUNTY; iy++) {

            particle = particles[i++] = new THREE.Particle(material);
            particle.position.x = ix * SEPARATION - ((AMOUNTX * SEPARATION) / 2);
            particle.position.z = iy * SEPARATION - ((AMOUNTY * SEPARATION) / 2);
            scene.add(particle);

        }

    }

    renderer = new THREE.CanvasRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    container.appendChild(renderer.domElement);


    document.addEventListener('mousemove', onDocumentMouseMove, false);
    document.addEventListener('touchstart', onDocumentTouchStart, false);
    document.addEventListener('touchmove', onDocumentTouchMove, false);

    //

    window.addEventListener('resize', onWindowResize, false);

    return container;
}



function onWindowResize() {

    windowHalfX = window.innerWidth / 2;
    windowHalfY = window.innerHeight / 2;

    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();

    renderer.setSize(window.innerWidth, window.innerHeight);

}

//

function onDocumentMouseMove(event) {

    mouseX = event.clientX - windowHalfX;
    mouseY = event.clientY - windowHalfY * 1.8;

}

function onDocumentTouchStart(event) {

    if (event.touches.length === 1) {

        event.preventDefault();

        mouseX = event.touches[0].pageX - windowHalfX;
        mouseY = event.touches[0].pageY - windowHalfY;

    }

}

function onDocumentTouchMove(event) {

    if (event.touches.length === 1) {

        event.preventDefault();

        mouseX = event.touches[0].pageX - windowHalfX;
        mouseY = event.touches[0].pageY - windowHalfY;

    }

}

//

function animate() {
    requestAnimationFrame(animate);
    render();
}

function render() {

    camera.position.x += (mouseX - camera.position.x) * .05;
    camera.position.y += (-mouseY - camera.position.y) * .05;
    camera.lookAt(scene.position);

    var i = 0;

    for (var ix = 0; ix < AMOUNTX; ix++) {

        for (var iy = 0; iy < AMOUNTY; iy++) {

            particle = particles[i++];
            particle.position.y = (Math.sin((ix + count) * 0.3) * 50) + (Math.sin((iy + count) * 0.5) * 50);
            particle.scale.x = particle.scale.y = (Math.sin((ix + count) * 0.3) + 1) * 2 + (Math.sin((iy + count) * 0.5) + 1) * 2;

        }

        if (!show)
            break;
    }

    renderer.render(scene, camera);

    count += 0.1;
}

function showBackground() {
    show = true;
    init();
    animate();
}

function hideBackground() {
    container.parentNode.removeChild(container);
    container = null;
}

function three_wavesBackground() {
    showBackground()
}
*/

class ThreeWaves {
    SEPARATION = 100;
    AMOUNTX = 100;
    AMOUNTY = 70;

    container = null;
    camera = null;
    scene = null;
    renderer = null;

    particles = null;
    particle = null;
    count = 0;

    mouseX = 85;
    mouseY = -642;

    windowHalfX = window.innerWidth / 2;
    windowHalfY = window.innerHeight / 2;

    show = false;

    constructor() {}

    init() {

        this.container = document.createElement('div');
        this.container.style.position = "absolute";
        this.container.style.zIndex = "-2"
        document.body.appendChild(this.container);

        this.camera = new THREE.PerspectiveCamera(120, window.innerWidth / window.innerHeight, 1, 10000);
        this.camera.position.z = 1000;

        this.scene = new THREE.Scene();

        this.particles = new Array();

        var PI2 = Math.PI * 2;
        var material = new THREE.ParticleCanvasMaterial({

            color: 0xe1e1e1,
            program: function(context) {

                context.beginPath();
                context.arc(0, 0, .6, 0, PI2, true);
                context.fill();

            }

        });

        var i = 0;

        for (var ix = 0; ix < this.AMOUNTX; ix++) {

            for (var iy = 0; iy < this.AMOUNTY; iy++) {

                this.particle = this.particles[i++] = new THREE.Particle(material);
                this.particle.position.x = ix * this.SEPARATION - ((this.AMOUNTX * this.SEPARATION) / 2);
                this.particle.position.z = iy * this.SEPARATION - ((this.AMOUNTY * this.SEPARATION) / 2);
                this.scene.add(this.particle);

            }

        }

        this.renderer = new THREE.CanvasRenderer();
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.container.appendChild(this.renderer.domElement);


        document.addEventListener('mousemove', this.onDocumentMouseMove.bind(this), false);
        document.addEventListener('touchstart', this.onDocumentTouchStart.bind(this), false);
        document.addEventListener('touchmove', this.onDocumentTouchMove.bind(this), false);

        //

        window.addEventListener('resize', this.onWindowResize.bind(this), false);

        return this.container;
    };



    onWindowResize() {

        this.windowHalfX = window.innerWidth / 2;
        this.windowHalfY = window.innerHeight / 2;

        this.camera.aspect = window.innerWidth / window.innerHeight;
        this.camera.updateProjectionMatrix();

        this.renderer.setSize(window.innerWidth, window.innerHeight);

    }

    //

    onDocumentMouseMove(event) {

        this.mouseX = event.clientX - this.windowHalfX;
        this.mouseY = event.clientY - this.windowHalfY * 1.8;

    }

    onDocumentTouchStart(event) {

        if (event.touches.length === 1) {

            event.preventDefault();

            this.mouseX = event.touches[0].pageX - this.windowHalfX;
            this.mouseY = event.touches[0].pageY - this.windowHalfY;

        }

    }

    onDocumentTouchMove(event) {

        if (event.touches.length === 1) {

            event.preventDefault();

            this.mouseX = event.touches[0].pageX - this.windowHalfX;
            this.mouseY = event.touches[0].pageY - this.windowHalfY;

        }

    }

    tid = 0;
    animate() {
        this.render();
        setTimeout(() => {
            this.tid = requestAnimationFrame(this.animate.bind(this));
        }, 50);

        if (!this.show) {
            cancelAnimationFrame(this.tid)
        }
    }

    render() {

        this.camera.position.x += (this.mouseX - this.camera.position.x) * .05;
        this.camera.position.y += (-this.mouseY - this.camera.position.y) * .05;
        this.camera.lookAt(this.scene.position);

        var i = 0;

        for (var ix = 0; ix < this.AMOUNTX; ix++) {

            for (var iy = 0; iy < this.AMOUNTY; iy++) {

                this.particle = this.particles[i++];
                this.particle.position.y = (Math.sin((ix + this.count) * 0.3) * 50) + (Math.sin((iy + this.count) * 0.5) * 50);
                this.particle.scale.x = this.particle.scale.y = (Math.sin((ix + this.count) * 0.3) + 1) * 2 + (Math.sin((iy + this.count) * 0.5) + 1) * 2;

            }

            if (!this.show)
                break;
        }

        this.renderer.render(this.scene, this.camera);

        this.count += 0.1;
    }

    showBackground() {
        if (this.show) {
            return;
        }
        this.show = true;
        this.init();
        this.animate();
    }

    hideBackground() {
        this.show = false;
        this.container.parentNode.removeChild(this.container);
        this.container = null;

        document.removeEventListener('mousemove', this.onDocumentMouseMove.bind(this), false);
        document.removeEventListener('touchstart', this.onDocumentTouchStart.bind(this), false);
        document.removeEventListener('touchmove', this.onDocumentTouchMove.bind(this), false);

        window.removeEventListener('resize', this.onWindowResize.bind(this), false);
    }
}

function three_wavesBackground() {

    waves = new ThreeWaves();
    return waves;
}

/*
 *修改自：https://www.html.cn/archives/5996
 */